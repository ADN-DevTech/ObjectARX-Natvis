<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <!-- Version 1.0e 11nov14 -->
  <!-- for acad/arx types -->

  <Type Name="AcArray&lt;*&gt;">
    <DisplayString>{{Len = {mLogicalLen}}}</DisplayString>
    <Expand>
      <Item Name="Len">mLogicalLen</Item>
      <Item Name="Buf Siz">mPhysicalLen</Item>
      <ArrayItems>
        <Size>mLogicalLen</Size>
        <ValuePointer>mpArray</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- see below
  <Type Name="AcRxClass">
    <DisplayString Condition="m_pImp!=0">{*(((wchar_t **)m_pImp)+1),su}</DisplayString>
  </Type>
  -->

  <Type Name="AcString">
    <DisplayString Condition="mnFlags==0">""</DisplayString>
    <DisplayString Condition="mnFlags==1">{mszStr,s}</DisplayString>
    <DisplayString Condition="mnFlags==2">{mchr.mwszStr,su}</DisplayString>
    <DisplayString Condition="mnFlags==3">{mptr.mpszData,s}</DisplayString>
    <DisplayString Condition="mnFlags==4">{mptr.mpwszData,su}</DisplayString>
    <DisplayString Condition="mnFlags==5">{*(wchar_t **)(mptr.mpPtrAndData),su}</DisplayString>
    <StringView Condition="mnFlags==0">""</StringView>
    <StringView Condition="mnFlags==1">mszStr,s</StringView>
    <StringView Condition="mnFlags==2">mchr.mwszStr,su</StringView>
    <StringView Condition="mnFlags==3">mptr.mpszData,s</StringView>
    <StringView Condition="mnFlags==4">mptr.mpwszData,su</StringView>
    <StringView>mptr.mpPtrAndData</StringView>
  </Type>

  <Type Name="CAdUiPathname">
    <DisplayString Condition="m_pathbuffer!=0">{*m_pathbuffer,su}</DisplayString>
    <DisplayString Condition="m_this_type==0">NO_PATH</DisplayString>
    <StringView Condition="m_pathbuffer!=0">*m_pathbuffer</StringView>
  </Type>

  <Type Name="CAdUiVolumeDescriptor">
    <DisplayString Condition="m_vol_localname!=0">{*m_vol_localname}</DisplayString>
    <StringView Condition="m_vol_localname!=0">*m_vol_localname</StringView>
  </Type>

  <Type Name="resbuf">
    <!--ARX/Lisp Function arg-->
    <DisplayString Condition="restype==5000">rtnone</DisplayString>
    <DisplayString Condition="restype==5001">{resval.rreal} rreal</DisplayString>
    <DisplayString Condition="restype==5002">{resval.rpoint[0]},{resval.rpoint[1]}</DisplayString>
    <DisplayString Condition="restype==5003">{resval.rint} rint</DisplayString>
    <DisplayString Condition="restype==5004">{resval.rreal} rreal</DisplayString>
    <DisplayString Condition="restype==5005">{resval.rstring}</DisplayString>
    <DisplayString Condition="restype==5006">soft pointer id</DisplayString>
    <DisplayString Condition="restype==5007">pick set</DisplayString>
    <DisplayString Condition="restype==5008">orientation</DisplayString>
    <DisplayString Condition="restype==5009">{resval.rpoint[0]},{resval.rpoint[1]},{resval.rpoint[2]}</DisplayString>
    <DisplayString Condition="restype==5010">{resval.rlong} rlong</DisplayString>
    <DisplayString Condition="restype==5016">list-begin</DisplayString>
    <DisplayString Condition="restype==5017">list-end</DisplayString>
    <DisplayString Condition="restype==5018">dotted pair</DisplayString>
    <DisplayString Condition="restype==5031">{resval.mnInt64} int64</DisplayString>

    <!--DXF/XData String-->
    <DisplayString Condition="(restype&gt;=1) &amp;&amp; (restype&lt;=9)">{resval.rstring}</DisplayString>
    <DisplayString Condition="(restype&gt;=100) &amp;&amp; (restype&lt;=103)">{resval.rstring}</DisplayString>
    <DisplayString Condition="restype==105">{resval.rstring}</DisplayString>
    <DisplayString Condition="(restype&gt;=300) &amp;&amp; (restype&lt;=309)">{resval.rstring}</DisplayString>
    <DisplayString Condition="restype==410">{resval.rstring}</DisplayString>
    <DisplayString Condition="(restype&gt;=430) &amp;&amp; (restype&lt;=439)">{resval.rstring}</DisplayString>
    <DisplayString Condition="(restype&gt;=470) &amp;&amp; (restype&lt;=479)">{resval.rstring}</DisplayString>
    <DisplayString Condition="(restype&gt;=999) &amp;&amp; (restype&lt;=1003)">{resval.rstring}</DisplayString>

    <!--DXF/XData Double-->
    <DisplayString Condition="(restype&gt;=38) &amp;&amp; (restype&lt;=59)">{resval.rreal} rreal</DisplayString>
    <DisplayString Condition="(restype&gt;=140) &amp;&amp; (restype&lt;=149)">{resval.rreal} rreal</DisplayString>
    <DisplayString Condition="(restype&gt;=460) &amp;&amp; (restype&lt;=469)">{resval.rreal} rreal</DisplayString>
    <DisplayString Condition="(restype&gt;=1040) &amp;&amp; (restype&lt;=1042)">{resval.rreal} rreal</DisplayString>

    <!--DXF/XData Point-->
    <DisplayString Condition="(restype&gt;=10) &amp;&amp; (restype&lt;=17)">
                                {resval.rpoint[0]},{resval.rpoint[1]},{resval.rpoint[2]}</DisplayString>
    <DisplayString Condition="(restype&gt;=110) &amp;&amp; (restype&lt;=112)">
                                {resval.rpoint[0]},{resval.rpoint[1]},{resval.rpoint[2]}</DisplayString>
    <DisplayString Condition="(restype&gt;=210) &amp;&amp; (restype&lt;=219)">
                                {resval.rpoint[0]},{resval.rpoint[1]},{resval.rpoint[2]}</DisplayString>
    <DisplayString Condition="(restype&gt;=1010) &amp;&amp; (restype&lt;=1013)">
                                {resval.rpoint[0]},{resval.rpoint[1]},{resval.rpoint[2]}</DisplayString>

    <!--DXF/XData Int16-->
    <DisplayString Condition="(restype&gt;=60) &amp;&amp; (restype&lt;=79)">{resval.rint} rint</DisplayString>
    <DisplayString Condition="(restype&gt;=270) &amp;&amp; (restype&lt;=279)">{resval.rint} rint</DisplayString>
    <DisplayString Condition="(restype&gt;=370) &amp;&amp; (restype&lt;=389)">{resval.rint} rint</DisplayString>
    <DisplayString Condition="(restype&gt;=400) &amp;&amp; (restype&lt;=409)">{resval.rint} rint</DisplayString>
    <DisplayString Condition="restype==1070">{resval.rint} rint</DisplayString>

    <!--DXF/XData Int32-->
    <DisplayString Condition="(restype&gt;=90) &amp;&amp; (restype&lt;=99)">{resval.rlong} rlong</DisplayString>
    <DisplayString Condition="(restype&gt;=420) &amp;&amp; (restype&lt;=429)">{resval.rlong} rlong</DisplayString>
    <DisplayString Condition="(restype&gt;=440) &amp;&amp; (restype&lt;=459)">{resval.rlong} rlong</DisplayString>
    <DisplayString Condition="restype==1071">{resval.rlong} rlong</DisplayString>

    <!--DXF/XData ObjectId-->
    <DisplayString Condition="(restype&gt;=330) &amp;&amp; (restype&lt;=339)">soft pointer id</DisplayString>
    <DisplayString Condition="(restype&gt;=340) &amp;&amp; (restype&lt;=349)">hard pointer id</DisplayString>
    <DisplayString Condition="(restype&gt;=350) &amp;&amp; (restype&lt;=359)">soft owner id</DisplayString>
    <DisplayString Condition="(restype&gt;=360) &amp;&amp; (restype&lt;=369)">hard owner id</DisplayString>
    <DisplayString Condition="(restype&gt;=390) &amp;&amp; (restype&lt;=399)">hard pointer id</DisplayString>

    <!--DXF/XData 8bit int-->
    <DisplayString Condition="(restype&gt;=280) &amp;&amp; (restype&lt;=289)">{resval.rint} 8-bit rint</DisplayString>
    <DisplayString Condition="(restype&gt;=290) &amp;&amp; (restype&lt;=299)">{resval.rint} bool rint</DisplayString>

    <!--DXF/XData Binary Chunk -->
    <DisplayString Condition="(restype&gt;=310) &amp;&amp; (restype&lt;=319)">binary size={resval.rbinary.clen}</DisplayString>
    <DisplayString Condition="restype==1004">binary size={resval.rbinary.clen}</DisplayString>

    <!--DXF/XData Int64 -->
    <DisplayString Condition="(restype&gt;=160) &amp;&amp; (restype&lt;=169)">{resval.mnInt64} int64</DisplayString>

    <Expand>
      <Item Name="rbnext">rbnext</Item>
      <Item Name="restype">restype</Item>
    </Expand>
  </Type>

  <!-- the following visualizers work in conjunction with the 2 files AcGeImp.h and AcImp.h.
       Just include these 2 files in your stdafx.h
  -->
  <!-- 3d AcGe classes -->
  <Type Name="AcGeLinearEnt3d">
    <DisplayString Condition="mpImpEnt!=0">{{start={((AcGeImpLinearEnt3d*)(mpImpEnt))->m_startPoint} dir={((AcGeImpLinearEnt3d*)(mpImpEnt))->m_Direction}}}</DisplayString>
    <Expand>
			<Item Condition="mpImpEnt!=0" Name="[m_startPoint]">((AcGeImpLinearEnt3d*)(mpImpEnt))->m_startPoint</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_Direction]" >((AcGeImpLinearEnt3d*)(mpImpEnt))->m_Direction</Item>
    </Expand>
  </Type>

  <Type Name="AcGePlane">
		<DisplayString Condition="mpImpEnt!=0">{{origin={((AcGeImpPlanarEnt*)(mpImpEnt))->m_Origin} u={((AcGeImpPlanarEnt*)(mpImpEnt))->m_uAxis} v={((AcGeImpPlanarEnt*)(mpImpEnt))->m_vAxis}}}</DisplayString>
		<Expand>
      <Item Condition="mpImpEnt!=0" Name="[m_Origin]">((AcGeImpPlanarEnt*)(mpImpEnt))->m_Origin</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_uAxis]">((AcGeImpPlanarEnt*)(mpImpEnt))->m_uAxis</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_vAxis]">((AcGeImpPlanarEnt*)(mpImpEnt))->m_vAxis</Item>
    </Expand>
  </Type>

  <Type Name="AcGeBoundBlock3d">
    <DisplayString>{{is box={((AcGeImpBoundBlock3d*)(mpImpEnt))->m_bIsBox} base={((AcGeImpBoundBlock3d*)(mpImpEnt))->m_Base} xdir={((AcGeImpBoundBlock3d*)(mpImpEnt))->m_xDir} ydir={((AcGeImpBoundBlock3d*)(mpImpEnt))->m_yDir} zdir={((AcGeImpBoundBlock3d*)(mpImpEnt))->m_zDir}}}</DisplayString>
    <Expand>
			<Item Condition="mpImpEnt!=0" Name="[m_bIsBox]">((AcGeImpBoundBlock3d*)(mpImpEnt))->m_bIsBox</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_Base]"  >((AcGeImpBoundBlock3d*)(mpImpEnt))->m_Base</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_xDir]"  >((AcGeImpBoundBlock3d*)(mpImpEnt))->m_xDir</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_yDir]"  >((AcGeImpBoundBlock3d*)(mpImpEnt))->m_yDir</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_zDir]"  >((AcGeImpBoundBlock3d*)(mpImpEnt))->m_zDir</Item>
    </Expand>
  </Type>

  <!-- 2d AcGe classes -->
  <Type Name="AcGeLinearEnt2d">
		<DisplayString Condition="mpImpEnt!=0">{{start={((AcGeImpLinearEnt2d*)(mpImpEnt))->m_startPoint} dir={((AcGeImpLinearEnt2d*)(mpImpEnt))->m_Direction}}}</DisplayString>
    <Expand>
			<Item Condition="mpImpEnt!=0" Name="[m_startPoint]">((AcGeImpLinearEnt2d*)(mpImpEnt))->m_startPoint</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_Direction]" >((AcGeImpLinearEnt2d*)(mpImpEnt))->m_Direction</Item>
    </Expand>
  </Type>

  <Type Name="AcGeBoundBlock2d">
		<DisplayString Condition="mpImpEnt!=0">{{is box={((AcGeImpBoundBlock2d*)(mpImpEnt))->m_bIsBox} base={((AcGeImpBoundBlock2d*)(mpImpEnt))->m_Base} xdir={((AcGeImpBoundBlock2d*)(mpImpEnt))->m_xDir} ydir={((AcGeImpBoundBlock2d*)(mpImpEnt))->m_yDir}}}</DisplayString>
    <Expand>
			<Item Condition="mpImpEnt!=0" Name="[m_bIsBox]">((AcGeImpBoundBlock2d*)(mpImpEnt))->m_bIsBox</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_Base]"  >((AcGeImpBoundBlock2d*)(mpImpEnt))->m_Base</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_xDir]"  >((AcGeImpBoundBlock2d*)(mpImpEnt))->m_xDir</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_yDir]"  >((AcGeImpBoundBlock2d*)(mpImpEnt))->m_yDir</Item>
    </Expand>
  </Type>

  <Type Name="AcGeInterval">
    <DisplayString>{{lower={((AcGeImpInterval*)(mpImpInt))->m_dLowerBound} upper={((AcGeImpInterval*)(mpImpInt))->m_dUpperBound} toleranz={((AcGeImpInterval*)(mpImpInt))->m_dTolerance}}}</DisplayString>
    <Expand>
			<Item Condition="mpImpEnt!=0" Name="[m_dLowerBound]">((AcGeImpInterval*)(mpImpInt))->m_dLowerBound</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_dUpperBound]">((AcGeImpInterval*)(mpImpInt))->m_dUpperBound</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_dTolerance]" >((AcGeImpInterval*)(mpImpInt))->m_dTolerance</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_bBoundedAbove]" ExcludeView="simple">((AcGeImpInterval*)(mpImpInt))->m_Flags.m_bBoundedAbove</Item>
			<Item Condition="mpImpEnt!=0" Name="[m_bBoundedBelow]" ExcludeView="simple">((AcGeImpInterval*)(mpImpInt))->m_Flags.m_bBoundedBelow</Item>
    </Expand>
  </Type>

  <!-- AcDb classes -->
	<Type Name="AcRxClass">
		<DisplayString>{{{(m_pImp)->m_strName}}}</DisplayString>
		<Expand>
			<Item Name="[name]">(m_pImp)->m_strName</Item>
		</Expand>
	</Type>

	<Type Name="AcDbObjectId">
    <DisplayString>{{{mId}}}</DisplayString>
    <Expand>
      <Item Name="[mId]">mId</Item>
    </Expand>
  </Type>

  <Type Name="AcImpObject">
    <DisplayString>{{m_id={m_id}}}</DisplayString>
    <Expand>
      <Item Name="[m_Id]"               >m_id</Item>
      <Item Name="[m_bReadEnabled]"     >m_flags.m_bReadEnabled</Item>
      <Item Name="[m_bWriteEnabled]"    >m_flags.m_bWriteEnabled</Item>
      <Item Name="[m_bNotifyEnabled]"   >m_flags.m_bNotifyEnabled</Item>
      <Item Name="[m_bErased]"          >m_flags.m_bErased</Item>
      <Item Name="[m_bGraphicsModified]">m_flags.m_bGraphicsModified</Item>
      <Item Name="[m_bXDataModified]"   >m_flags.m_bXDataModified</Item>
    </Expand>
  </Type>

  <Type Name="AcDbObject">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id} name={(*(AcRxClass**)(((BYTE*)*(*(void***)(this)+1)+4)+*(int*)((BYTE*)*(*(void***)(this)+1)+7)+7))->m_pImp->m_strName}}}</DisplayString>
    <Expand>
      <ExpandedItem>mpImpObject</ExpandedItem>
      <Item Name="[mpImpObject]">((AcImpObject*)(mpImpObject))</Item>
			<Item Name="[AcRxClass]">*(AcRxClass**)(((BYTE*)*(*(void***)(this)+1)+4)+*(int*)((BYTE*)*(*(void***)(this)+1)+7)+7)</Item>
    </Expand>
  </Type>

  <Type Name="AcImpEntity">
    <Expand>
      <Item Name="[AcDbObject]">((AcImpObject*)(this))</Item>
    </Expand>
  </Type>
  
  <Type Name="AcDbEntity">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id}}}</DisplayString>
    <Expand>
      <Item Name="[AcDbObject]">(mpImpObject)</Item>
      <Item Name="[mpImpObject]">((AcImpEntity*)(mpImpObject))</Item>
    </Expand>
  </Type>

  <Type Name="AcImpCurve">
    <Expand>
      <Item Name="[AcDbEntity]">((AcImpEntity*)(this))</Item>
    </Expand>
  </Type>

  <Type Name="AcDbCurve">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id}}}</DisplayString>
    <Expand>
      <Item Name="[AcDbEntity]">((AcImpEntity*)(mpImpObject))</Item>
      <Item Name="[mpImpObject]">((AcImpCurve*)(mpImpObject))</Item>
    </Expand>
  </Type>

  <Type Name="AcImpLine">
    <DisplayString>{{start={m_startPoint} end={m_endPoint}}}</DisplayString>
    <Expand>
      <Item Name="[m_startPoint]">m_startPoint</Item>
      <Item Name="[m_endPoint]"  >m_endPoint</Item>
    </Expand>
  </Type>

  <Type Name="AcDbLine">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id} start={((AcImpLine*)(mpImpObject))->m_startPoint} end={((AcImpLine*)(mpImpObject))->m_endPoint}}}</DisplayString>
    <Expand>
      <Item Name="[AcDbCurve]">((AcImpCurve*)(mpImpObject))</Item>
      <ExpandedItem>((AcImpLine*)(mpImpObject))</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="AcImpArc">
    <DisplayString>{{center={m_Center} radius={m_dRadius}}}</DisplayString>
    <Expand>
      <Item Name="[m_Center]"     >m_Center</Item>
      <Item Name="[m_dRadius]"    >m_dRadius</Item>
      <Item Name="[m_dStartAngle]">m_dStartAngle</Item>
      <Item Name="[m_dEndAngle]"  >m_dEndAngle</Item>
    </Expand>
  </Type>

  <Type Name="AcDbArc">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id} center={((AcImpArc*)(mpImpObject))->m_Center} radius={((AcImpArc*)(mpImpObject))->m_dRadius}}}</DisplayString>
    <Expand>
      <Item Name="[AcDbCurve]">((AcImpCurve*)(mpImpObject))</Item>
      <ExpandedItem>((AcImpArc*)(mpImpObject))</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="AcImpCircle">
    <DisplayString>{{center={m_Center} radius={m_dRadius}}}</DisplayString>
    <Expand>
      <Item Name="[m_Center]"  >m_Center</Item>
      <Item Name="[m_dRadius]" >m_dRadius</Item>
    </Expand>
  </Type>

  <Type Name="AcDbCircle">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id} center={((AcImpCircle*)(mpImpObject))->m_Center} radius={((AcImpCircle*)(mpImpObject))->m_dRadius}}}</DisplayString>
    <Expand>
      <Item Name="[AcDbCurve]">((AcImpCurve*)(mpImpObject))</Item>
      <ExpandedItem>((AcImpCircle*)(mpImpObject))</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="AcImpText">
    <DisplayString>{{text={m_strText,su}}}</DisplayString>
    <StringView>m_strText,su</StringView>
    <Expand>
      <Item Name="[m_strText]"     >m_strText,su</Item>
      <Item Name="[m_VerticalMode]">m_flags1.m_VerticalMode</Item>
      <Item Name="[m_dOblique]"    >m_dOblique</Item>
      <Item Name="[m_dTextHeight]" >m_dTextHeight</Item>
      <Item Name="[m_dWidthFactor]">m_dWidthFactor</Item>
      <Item Name="[m_bMirroredInX]">m_flags2.m_bMirroredInX</Item>
      <Item Name="[m_bMirroredInY]">m_flags2.m_bMirroredInY</Item>
    </Expand>
  </Type>

  <Type Name="AcDbText">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id} text={((AcImpText*)(mpImpObject))->m_strText,su}}}</DisplayString>
    <StringView>((AcImpText*)(mpImpObject))->m_strText,su</StringView>
    <Expand>
      <Item Name="[AcDbEntity]">((AcImpEntity*)(mpImpObject))</Item>
      <ExpandedItem>((AcImpText*)(mpImpObject))</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="AcImpMText">
    <DisplayString>{{text=m_strContents,su}}}</DisplayString>
    <StringView>m_strContents,su</StringView>
    <Expand>
      <Item Name="[m_strContents]"       >m_strContents,su</Item>
      <Item Name="[m_Normal]"            >m_Normal</Item>
      <Item Name="[m_dTextHeight]"       >m_dTextHeight</Item>
      <Item Name="[m_dLineSpacingFactor]">m_dLineSpacingFactor</Item>
      <Item Name="[m_FlowDirection]"     >m_FlowDirection</Item>
    </Expand>
  </Type>

  <Type Name="AcDbMText">
    <DisplayString>{{m_id={((AcImpObject*)(mpImpObject))->m_id} text={((AcImpMText*)(mpImpObject))->m_strContents,su}}}</DisplayString>
    <StringView>((AcImpMText*)(mpImpObject))->m_strContents,su</StringView>
    <Expand>
      <Item Name="[AcDbEntity]">((AcImpEntity*)(mpImpObject))</Item>
      <ExpandedItem>((AcImpMText*)(mpImpObject))</ExpandedItem>
    </Expand>
  </Type>

</AutoVisualizer>
